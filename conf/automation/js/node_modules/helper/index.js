const system = Java.type('java.lang.System');

function JSRule(cls) {
    const obj = new cls();

    const params = {
       name: obj.constructor.name,
       triggers: obj.triggers(),
       execute: obj.execute.bind(obj)
    };

    if( typeof(params.id) === "undefined" ) params.id = params.name

    var prefix = console.loggerName.split(".").slice(-2)[0]
    var logger = log(prefix  + "." + params.id);
    console.log = function( msg){ logger.info(msg); };

    function appendDetailInfo(event)
    {
        if( event )
        {
            if( event.triggerType )
            {
                if( event.triggerType.startsWith("Item") ) return `[Item: ${event.itemName}]`;
                else if( event.triggerType.startsWith("Group") ) return `[Group: ${event.itemName}]`;
                else if( event.triggerType.startsWith("Thing") ) return `[Thing: ${event.thingUID}]`;
            }
            return `[Other: ${event.eventClass.split(".").slice(-1)}]`;
        }
        return "[Unknown]";
    }

    const _execute = params.execute;
    params.execute = function(event)
    {
        const start = system.nanoTime();
        _execute(event);
        const end = system.nanoTime();
        const duration = ( Math.round( ( ( end - start ) / 1000000 ) * 10) / 10.0 ).toFixed(1);
        const duration_str = `${duration}`
        const details = appendDetailInfo(event)
        logger.info(`Rule executed in ${duration_str.padStart(6," ") } ms ${details}`);
    }

    rules.JSRule(params)
}

/*Timer = (function(ret) {
    activeTimer = []
    runtime.lifecycleTracker.addDisposeHook(() => {
      console.log("Deinitialization hook runs...");
      for( id in activeTimer )
      {
          //clearTimeout(activeTimer[id]);
      }
    });

    ret.start = function(func, timeout)
    {
        const id = setTimeout(() => {
            activeTimer.unshift(id);
            func();
        }, timeout);
        activeTimer.push(id);
        return {
            'cancel': function()
            {
                clearTimeout(id);
                activeTimer.unshift(id);
            }
        };
    }
    return ret;
})({});

test = Timer.start(() => {
    console.log("timer");
}, 5000);
//test.cancel();*/

module.exports = {
  JSRule
};
