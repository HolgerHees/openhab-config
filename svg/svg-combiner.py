
import json
import time
import urlparse
import sys
from os import listdir
from os.path import isfile, join, basename, normpath
import xml.etree.ElementTree as ET

def isForbiddenTag(node):
	return node.tag == '{http://www.w3.org/2000/svg}defs' or node.tag == '{http://www.w3.org/2000/svg}metadata' or node.tag == '{http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd}namedview'

def file_get_contents(filename):
	return open(filename).read()

def clean_styles( child ):
	_styles = []
	_classes = []
	styles = child.attrib['style'].split(";")
	
	for style in styles:
		data = style.split(":")
		if data[0] == 'fill':
			#child.attrib['fill'] = data[1]
			pass
		
		elif data[0] == 'stroke':
			#child.attrib['stroke'] = data[1]
			pass
		
        # Keep opacity. Used for info svg icon.
		elif ( data[0] == 'stroke-opacity' or data[0] == 'fill-opacity' ) and ( data[1] == '1' or data[1] == '0' ) :
			_styles.append(data[0]+":"+data[1])
			pass
		
		else:
			#_styles.append(style)
			pass
		
	if len(_styles) > 0:
		child.attrib['style'] = ";".join(_styles)
	else:
		del child.attrib['style']
		#pass
		
def process_files( sourcePath, file, prefix, createGrayscaled, createCleanGrayscaled, createColored, top ):
	content = file_get_contents( sourcePath + file )
	
	name = file[0:-4]
	
	#if sourcePath.endswith('weather/'):
	#	name = 'weather_' + name
	
	symbol_count = 0;
	
	if createGrayscaled or createCleanGrayscaled:
		xml = ET.fromstring(content)
		group = ET.Element('g', attrib = { 'id': prefix + "_" + name + "_grayscaled"})
		
		for node in xml.findall('.//*[@style]'):
			if createCleanGrayscaled:    
				del node.attrib['style']
			else:
				clean_styles(node)
			
		for node in xml.findall('.//*[@fill]'):
			del node.attrib['fill']
			
		for node in xml.findall('.//*[@stroke]'):
			del node.attrib['stroke']
			
		if createCleanGrayscaled:    
			for node in xml.findall('.//*[@stroke-width]'):
				del node.attrib['stroke-width']
			
		for child in xml:
			if isForbiddenTag(child):
				continue
			#print child.tag
			group.append(child)
			
		top.append(group)
		print " --> added default icon '" + sourcePath + group.attrib['id'] + "'"
		symbol_count = symbol_count + 1
		
	if createColored:
		xml = ET.fromstring(content)
		group = ET.Element('g', attrib = { 'id': prefix + "_" + name + "_colored"})
		for child in xml:
			if isForbiddenTag(child):
				continue
			group.append(child)
		top.append(group)
		print " --> added colored icon '" + sourcePath + group.attrib['id'] + "'"
		symbol_count = symbol_count + 1

	return symbol_count
	
t1 = time.time()

process_count = 0
symbol_count = 0

configs = [
	{
        'name': 'openhab',
		'source': '/dataRaid/shared/openhab2/svg/openhab/',
		'grayscaled': [
			'light','settings','man_2'
		]
	},
	{
        'name': 'haus',
		'source': '/dataRaid/shared/openhab2/svg/haus/',
		'grayscaled': [
			'floor_attic','floor_first','floor_second','outside'
		]
	},
	{
        'name': 'self',
		'source': '/dataRaid/shared/openhab2/svg/self/',
		'grayscaled': [
            'window','sensor2','info','roomba','garden','loudspeaker','energy','wind','temperature','rain','radiatore','snowflake1','snowflake2','snowflake3','snowflake4','compass_circle','compass_needle','sun'
		],
		'clean_grayscaled': [
            'raindrop1','raindrop2','raindrop3','raindrop4','thunder',
			'day','cloudy-day-0','cloudy-day-1','cloudy-day-2','night','cloudy-night-0','cloudy-night-1','cloudy-night-2','cloudy'
		],
		'colored': []
	}
]
		
ET.register_namespace("","http://www.w3.org/2000/svg")
top = ET.Element('svg', attrib = { 'version':'1.1', 'xmlns:xlink':'http://www.w3.org/1999/xlink', 'x':"0px", 'y':"0px", 'viewBox':"0 0 64 64", 'enable-background':"new 0 0 64 64", 'xml:space':"preserve"})
comment = ET.Comment('Generated by Marvin')
top.append(comment)

for config in configs:
	sourcePath = config['source']
	onlyfiles = [f for f in listdir(sourcePath) if isfile(join(sourcePath, f))]

	for file in onlyfiles:
		if(file[:1] != '.' and file[-3:] == 'svg'):
			print "Processing file: " + file
			
			prefix = config['name']#basename(normpath(sourcePath))
				
			createCleanGrayscaled = 'clean_grayscaled' in config and file[0:-4] in config['clean_grayscaled']
			createGrayscaled = 'grayscaled' in config and file[0:-4] in config['grayscaled']
			createColored = 'colored' in config and file[0:-4] in config['colored']
			symbol_count += process_files( sourcePath, file, prefix, createGrayscaled, createCleanGrayscaled, createColored, top )
			
			process_count += 1

f = open("icons.svg", 'w')
f.write(ET.tostring(top,encoding='utf8', method='xml'))
f.close()

t2 = time.time()
print "Done in " + str(t2-t1) + " seconds. Processed " + str(process_count) + " icons. Added " + str(symbol_count) + " icons."    

 
